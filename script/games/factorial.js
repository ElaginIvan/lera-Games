(function () {
    // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    window.gameConfigs = window.gameConfigs || {};

    // --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã ---
    const calculateFactorial = (n) => (n < 0 ? 0 : (n === 0 ? 1 : Array.from({ length: n }, (_, i) => i + 1).reduce((acc, val) => acc * val, 1)));

    // --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞ ---
    window.gameConfigs.factorial = {
        // –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
        title: "üéâ –§–ê–ö–¢–û–†–ò–ê–õ-–§–ï–°–¢! ‚ú®",
        questionPrompt: "–ß–µ–º—É —Ä–∞–≤–µ–Ω —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞:",
        helpHTML: `
            <p>–§–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞ - —ç—Ç–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ —ç—Ç–æ–≥–æ —á–∏—Å–ª–∞.</p>
            <p>–û–±–æ–∑–Ω–∞—á–∞–µ—Ç—Å—è –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –∑–Ω–∞–∫–æ–º: n!</p>
            <p>–ü—Ä–∏–º–µ—Ä—ã:</p>
            <ul>
                <li>3! = 1 √ó 2 √ó 3 = 6</li>
                <li>4! = 1 √ó 2 √ó 3 √ó 4 = 24</li>
                <li>5! = 1 √ó 2 √ó 3 √ó 4 √ó 5 = 120</li>
            </ul>
            <p>–ó–∞–ø–æ–º–Ω–∏: 0! = 1 (—ç—Ç–æ –æ—Å–æ–±—ã–π —Å–ª—É—á–∞–π)</p>
        `,

        // –°—Ç–∞—Ä–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        gameId: 'factorial',
        // answerType: 'textInput', // –£–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∏–ø –æ—Ç–≤–µ—Ç–æ–≤!
        // timePerQuestion: 10, // –í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç: 10 —Å–µ–∫—É–Ω–¥

        getSolutionHTML: (gameInstance) => {
            const number = gameInstance.currentQuestionData.number;
            const correctAnswer = gameInstance.correctAnswer;
            if (number === 0) return '<p>0! = 1 (–ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é)</p>';

            let explanation = Array.from({ length: number }, (_, i) => i + 1).join(' √ó ');
            return `<p>${number}! = ${explanation} = ${correctAnswer}</p>`;
        },

        generateQuestionAndAnswers: (level, existingQuestionData = null) => {
            let currentNumber;
            if (existingQuestionData) {
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∏—Å–ª–æ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                currentNumber = existingQuestionData.number;
            } else {
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ
                let maxNumber = Math.min(3 + level, 8);
                currentNumber = Math.floor(Math.random() * (maxNumber + 1));
            }
            const correctAnswer = calculateFactorial(currentNumber);

            let answers = [correctAnswer];
            while (answers.length < 4) {
                let wrongAnswer;
                if (currentNumber > 1) {
                    if (Math.random() > 0.7) {
                        wrongAnswer = calculateFactorial(currentNumber - 1);
                    } else {
                        let deviation = Math.floor(Math.random() * 10) + 1;
                        if (Math.random() > 0.5) deviation = -deviation;
                        wrongAnswer = correctAnswer + deviation;
                    }
                } else {
                    wrongAnswer = Math.floor(Math.random() * 5);
                }
                if (wrongAnswer < 0) wrongAnswer = 0;

                if (!answers.includes(wrongAnswer)) {
                    answers.push(wrongAnswer);
                }
            }

            return {
                question: currentNumber,
                correctAnswer: correctAnswer,
                answers: answers,
                questionData: { number: currentNumber }
            };
        },

        getSuccessMessage: () => {
            const messages = [
                "–í–µ—Ä–Ω–æ! –¢—ã —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª—å–Ω—ã–π –≥–µ–Ω–∏–π!",
                "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –£–º–Ω–æ–∂–µ–Ω–∏–µ - —Ç–≤–æ—è —Å—É–ø–µ—Ä—Å–∏–ª–∞!",
                "–û—Ç–ª–∏—á–Ω–æ! –¢—ã –º–∞—Å—Ç–µ—Ä —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–≤!"];
            return messages[Math.floor(Math.random() * messages.length)];
        },

        getHint: (gameInstance) => {
            const num = gameInstance.currentQuestionData.number;
            const hints = [`–ü–æ–º–Ω–∏: ${num}! - —ç—Ç–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤—Å–µ—Ö —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ ${num}.`, "–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–ª—É—á–∏—Ç—Å—è!"];
            return hints[Math.floor(Math.random() * hints.length)];
        }
    };
})();
