document.addEventListener('DOMContentLoaded', () => {
    class SuperGame {
        constructor(gameIds) {
            this.gameIds = gameIds;
            this.loadedConfigs = [];
            this.score = 0;
            this.questionCount = 0;
            this.gameDuration = 180; // 3 –º–∏–Ω—É—Ç—ã
            this.timeLeft = this.gameDuration;
            this.timerId = null;
            this.currentCorrectAnswer = null;
            this.currentGameId = null; // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∞—Å—Å–∞ —Å—Ç–∏–ª—è
            this.lastQuestionString = null; // –î–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ–≤—Ç–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤

            // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
            this.timeLeftElement = document.getElementById('time-left');
            this.scoreElement = document.getElementById('score');
            this.questionCountElement = document.getElementById('question-count');
            this.questionPromptElement = document.getElementById('question-prompt');
            this.questionElement = document.getElementById('question');
            this.answersContainer = document.querySelector('.answers');
            this.feedbackText = document.getElementById('feedback-text');
            this.nextButton = document.getElementById('next-btn');
            this.gameArea = document.querySelector('.game-area');
            this.gameOverScreen = document.getElementById('game-over-screen');
            this.finalScoreElement = document.getElementById('final-score');
            this.finalQuestionsElement = document.getElementById('final-questions');
            this.restartButton = document.getElementById('restart-btn');
            this.newRecordMessageElement = document.getElementById('new-record-message');

            this.init();
        }

        async init() {
            try {
                await this.loadGameConfigs(); // –ñ–¥–µ–º, –ø–æ–∫–∞ –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥–∏ –∑–∞–≥—Ä—É–∑—è—Ç—Å—è

                if (this.loadedConfigs.length === 0) {
                    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä.');
                }

                this.nextButton.addEventListener('click', () => this.newQuestion());
                this.restartButton.addEventListener('click', () => window.location.reload());

                this.startGame();
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∞—Ä–∞—Ñ–æ–Ω–∞:", error);
                this.gameArea.innerHTML = `<h1>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ä–∞—Ñ–æ–Ω–∞</h1><p>${error.message}</p>`;
            }
        }

        // –ù–æ–≤—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–æ–≤
        async loadGameConfigs() {
            window.gameConfigs = window.gameConfigs || {};

            const loadPromises = this.gameIds.map(id => {
                return new Promise((resolve, reject) => {
                    // –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥ —É–∂–µ –µ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                    if (window.gameConfigs[id]) {
                        return resolve(window.gameConfigs[id]);
                    }
                    // –ò–Ω–∞—á–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–∫—Ä–∏–ø—Ç
                    const script = document.createElement('script');
                    script.src = `/lera_game/script/games/${id}.js`;
                    script.onload = () => {
                        if (window.gameConfigs[id]) {
                            resolve(window.gameConfigs[id]);
                        } else {
                            reject(new Error(`–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è "${id}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`));
                        }
                    };
                    script.onerror = () => reject(new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫—Ä–∏–ø—Ç –¥–ª—è "${id}".`));
                    document.body.appendChild(script);
                });
            });

            this.loadedConfigs = await Promise.all(loadPromises);
        }

        startGame() {
            this.score = 0;
            this.questionCount = 0;
            this.timeLeft = this.gameDuration;
            this.updateUI();
            this.startTimer();
            this.newQuestion();
            this.gameArea.classList.remove('hidden');
            this.gameOverScreen.classList.add('hidden');
        }

        startTimer() {
            this.timerId = setInterval(() => {
                this.timeLeft--;
                this.updateUI();
                if (this.timeLeft <= 0) {
                    this.endGame();
                }
            }, 1000);
        }

        updateUI() {
            const minutes = Math.floor(this.timeLeft / 60);
            const seconds = this.timeLeft % 60;
            this.timeLeftElement.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
            this.scoreElement.textContent = this.score;
            this.questionCountElement.textContent = this.questionCount;
        }

        newQuestion() {
            this.feedbackText.textContent = '';
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª—å—à–µ" —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å
            this.nextButton.classList.remove('hidden');
            this.nextButton.disabled = false; // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞

            this.answersContainer.innerHTML = '';

            // –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
            const questionGenerator = () => {
                // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∏–≥—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞
                const randomConfig = this.loadedConfigs[Math.floor(Math.random() * this.loadedConfigs.length)];
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É—è –µ–µ –ª–æ–≥–∏–∫—É (—É—Ä–æ–≤–µ–Ω—å –≤—Å–µ–≥–¥–∞ 1, –Ω–æ –º–æ–∂–Ω–æ —É—Å–ª–æ–∂–Ω–∏—Ç—å)
                const questionData = randomConfig.generateQuestionAndAnswers(1);
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –∫ –¥–∞–Ω–Ω—ã–º, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –ø–æ–∑–∂–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞)
                return { ...questionData, config: randomConfig };
            };

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Ç–∏–ª–∏—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            const generatedData = generateUniqueQuestion(questionGenerator, this.lastQuestionString);
            const { question, correctAnswer, answers, config } = generatedData;

            this.lastQuestionString = question; // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            this.questionPromptElement.textContent = config.questionPrompt;
            this.questionElement.textContent = question;
            this.currentCorrectAnswer = correctAnswer;

            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
            createAnswerButtons(this.answersContainer, answers, (answer, button) => this.checkAnswer(answer, button));
        }

        checkAnswer(selectedAnswer, button) {
            // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
            const answerButtons = this.answersContainer.querySelectorAll('.answer-btn');
            answerButtons.forEach(btn => btn.disabled = true);

            // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª—å—à–µ" –Ω–∞ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–≤–æ–π–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
            this.nextButton.disabled = true;

            const isCorrect = selectedAnswer == this.currentCorrectAnswer;

            if (isCorrect) {
                this.feedbackText.textContent = "–ü—Ä–∞–≤–∏–ª—å–Ω–æ!";
                this.feedbackText.style.color = '#00b894';
                button.classList.add('correct');
                this.score += 10;
                this.questionCount++;
                this.updateUI();

                // –ü—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
                setTimeout(() => this.newQuestion(), 1000);
            } else {
                this.feedbackText.textContent = `–û—à–∏–±–∫–∞! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${this.currentCorrectAnswer}`;
                this.feedbackText.style.color = '#ff7675';
                button.classList.add('incorrect');
                // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                answerButtons.forEach(btn => {
                    if (btn.textContent == this.currentCorrectAnswer) {
                        btn.classList.add('correct');
                    }
                });
                // –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª—å—à–µ" –∞–∫—Ç–∏–≤–Ω–æ–π, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–µ—Ä–µ–π—Ç–∏ —Å–∞–º
                this.nextButton.disabled = false;
            }
        }

        endGame() {
            clearInterval(this.timerId);
            this.gameArea.classList.add('hidden');
            this.gameOverScreen.classList.remove('hidden');
            this.finalScoreElement.textContent = this.score;
            this.finalQuestionsElement.textContent = this.questionCount;

            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∫–æ—Ä–¥–∞ –º–∞—Ä–∞—Ñ–æ–Ω–∞
            const marathonHighScore = localStorage.getItem('marathonHighScore') || 0;
            if (this.score > 0 && this.score > marathonHighScore) {
                localStorage.setItem('marathonHighScore', this.score);
                this.newRecordMessageElement.textContent = `üéâ –ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥!`;
                this.newRecordMessageElement.classList.remove('hidden');
            }
        }
    }

    // --- –ó–∞–ø—É—Å–∫ ---
    const urlParams = new URLSearchParams(window.location.search);
    const gameIdsParam = urlParams.get('games');

    if (gameIdsParam) {
        const gameIds = gameIdsParam.split(',');
        new SuperGame(gameIds);
    } else {
        document.body.innerHTML = '<h1>–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –∏–≥—Ä—ã –¥–ª—è –º–∞—Ä–∞—Ñ–æ–Ω–∞.</h1>';
    }
});